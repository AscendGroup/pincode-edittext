apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {
	compileSdkVersion project.compileSdkVersion
	buildToolsVersion project.buildToolsVersion

	defaultConfig {
		minSdkVersion project.minSdkVersion
		targetSdkVersion project.targetSdkVersion
		versionCode 1
		versionName "1.0.0"

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
}


ext {
	bintrayRepo = 'oakkub' // Default is 'maven'
	bintrayName = 'pincode-edittext'

	publishedGroupId = 'com.oakkub' // Maven Group ID for the artifact
	libraryName = 'PinCodeEditText'
	artifact = 'pincode-edittext'

	libraryDescription = 'An extension of EditText that has a pin-code style'

	siteUrl = 'https://github.com/oakkub/pincode-edittext' // Homepage URL of the library
	gitUrl = 'https://github.com/oakkub/pincode-edittext.git' // Git repository URL

	libraryVersion = '1.0.0' // This is the library version used when deploying the artifact

	developerId = 'oakkub'
	developerName = 'Metas Kerdwat'
	developerEmail = 'oakkub.1995@gmail.com'

	licenseName = 'The Apache Software License, Version 2.0'
	licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	allLicenses = ["Apache-2.0"]
}

group = publishedGroupId // Maven Group ID for the artifact
version = libraryVersion

install {
	repositories.mavenInstaller {
		// This generates POM.xml with proper parameters
		pom {
			project {
				packaging 'aar'
				groupId publishedGroupId
				artifactId artifact

				// Add your description here
				name libraryName
				description libraryDescription
				url siteUrl

				// Set your license
				licenses {
					license {
						name licenseName
						url licenseUrl
					}
				}
				developers {
					developer {
						id developerId
						name developerName
						email developerEmail
					}
				}
				scm {
					connection gitUrl
					developerConnection gitUrl
					url siteUrl
				}
			}
		}
	}
}

if (project.hasProperty("android")) { // Android libraries
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from android.sourceSets.main.java.srcDirs
	}

	task javadoc(type: Javadoc) {
		source = android.sourceSets.main.java.srcDirs
		classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
	}
} else { // Java libraries
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
	user = properties.getProperty("bintray.user")
	key = properties.getProperty("bintray.apikey")

	configurations = ['archives']
	pkg {
		repo = bintrayRepo
		name = bintrayName
		desc = libraryDescription
		websiteUrl = siteUrl
		vcsUrl = gitUrl
		licenses = allLicenses
		publish = true
		publicDownloadNumbers = true
		version {
			desc = libraryDescription
			gpg {
				sign = true //Determines whether to GPG sign the files. The default is false
				passphrase = properties.getProperty("bintray.gpg.password")
				//Optional. The passphrase for GPG signing'
			}
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	})
	compile "com.android.support:appcompat-v7:$supportLibraryVersion"
	testCompile 'junit:junit:4.12'
}
